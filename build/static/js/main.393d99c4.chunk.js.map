{"version":3,"sources":["component/map.js","API/index.js","App.js","serviceWorker.js","index.js"],"names":["MyMapComponent","withScriptjs","withGoogleMap","props","react_default","a","createElement","lib","defaultZoom","zoom","defaultCenter","lat","lng","center","markers","filter","marker","isVisible","map","idx","key","position","Map","Object","assign","this","googleMapURL","loadingElement","style","height","containerElement","mapElement","Component","Helper","keys","client_id","client_secret","v","concat","join","urlPrams","Accept","endPoint","method","requestData","headers","fetch","baseURL","auth","urlBuilder","then","res","json","SquareAPI","simpleFetch","VENUE_ID","App","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","venues","_this2","search","near","query","limit","results","response","geocode","feature","geometry","venue","location","isOpen","setState","console","log","className","map_Map","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.393d99c4.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport { \n    withScriptjs, \n    withGoogleMap, \n    GoogleMap, \n    Marker \n} from \"react-google-maps\";\n\nconst MyMapComponent = withScriptjs(    \n    withGoogleMap(props => (\n  <GoogleMap \n    defaultZoom={13} \n    zoom={props.zoom} \n    defaultCenter={{ lat: 41.878114, lng: -87.629798 }}\n    center={props.center}\n    >\n    {props.markers && props.markers.filter(marker => marker.isVisible).map((marker, idx) => (\n\n    <Marker key={idx} position={{ lat: marker.lat, lng: marker.lng}} />\n    ))}\n  </GoogleMap>\n))\n);  \n\nexport default class Map extends Component {\n    render() {\n        return (\n\n            <MyMapComponent\n                {...this.props}\n                googleMapURL=\"https://maps.googleapis.com/maps/api/js?v=3.exp&key=AIzaSyDYOOv_H0ENbkqSu6OvsDedawuAUmM3ngg\"\n                loadingElement={<div style={{ height: `100%` }} />}\n                containerElement={<div style={{ height: `900px` }} />}\n                mapElement={<div style={{ height: `100%` }} />}\n            />\n        );\n    }\n}","class Helper {\n    static baseURL(){\n        return \"https://api.foursquare.com/v2\";\n    }\n    static auth() {\n\n        const keys = {\n            client_id:\"4FE42AROVDQTD435DK1QW4VI0GC21SKEVV0A4S0XHNMVENCR\",\n            client_secret:\"EBOHDMYU42ANEEVF1RWAZH3ACQX4YVU042UDH4XG4BKVY0SC\",\n            v:\"20181006\"\n        };\n        return Object.keys(keys)\n        .map(key => `${key}=${keys[key]}`)\n        .join(\"&\");\n    }\n    static urlBuilder(urlPrams){\n        if(!urlPrams){\n            return \"\"\n        }\n        return Object.keys(urlPrams)\n            .map(key => `${key}=${urlPrams[key]}`)\n            .join(\"&\");\n    }\n\n\n    static headers() {\n        return {\n            Accept:\"application/json\"\n        };\n    }\n    static simpleFetch(endPoint, method, urlPrams){\n        let requestData = {\n            method,\n            headers: Helper.headers()\n        };\n        return fetch(`${Helper.baseURL()}${endPoint}?${Helper.auth()}&${Helper.urlBuilder(\n            urlPrams\n            )}`,\n            requestData\n        ).then(res => res.json()\n        );\n    }\n}\n\nexport default class SquareAPI {\n    static search(urlPrams){\n        return Helper.simpleFetch(\"/venues/search\", \"GET\", urlPrams);\n\n        \n    }\n    static getVenueDetails(VENUE_ID){\n        return Helper.simpleFetch(`/venues/${VENUE_ID}`, \"GET\");\n\n    }\n    static getVenuePhotos(VENUE_ID) {\n        return Helper.simpleFetch(`/venues/${VENUE_ID}/photos`, \"GET\");\n\n    }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport Map from \"./component/map\";\nimport SquareAPI from \"./API/\";\n\nclass App extends Component {\n    constructor(){\n      super();\n      this.state ={\n        venues:[],\n        markers:[],\n        center:[],\n        zoom:[13]\n      };\n\n    }\n\n \n    componentDidMount(){\n      SquareAPI.search({\n        near: \"Chicago,IL\",\n        query: \"Me\",\n        limit: 12\n     }).then(results => {\n          const { venues } = results.response;\n          const { center } = results.response.geocode.feature.geometry;\n          const markers = venues.map(venue => {\n            return {\n              lat: venue.location.lat,\n              lng: venue.location.lng,\n              isOpen:false,\n              isVisible:true\n            };\n          });\n          this.setState({ venues, center, markers });\n        console.log(results);\n\n      });\n    }\n  \n  \n  render() {\n    return (\n      <div className=\"App\">\n        <Map {...this.state} />\n        </div>\n    );\n  }\n} \n\nexport default App;\n\n\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}